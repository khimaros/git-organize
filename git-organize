#!/bin/bash

set -euo pipefail

GIT_ORGANIZE_BASE="${GIT_ORGANIZE_BASE:="${HOME}/src"}"

has_repo() {
        local path="$1"
        test -d "${path}/.git/"
}

repo_url() {
        local path="$1"
        git config -f "${path}/.git/config" --get remote.origin.url
}

repo_dest_path() {
        local url="$1"

	local repopath=$(echo "$url" | sed -r 's|\w+://||' | cut -d'@' -f2- | sed -r 's|\:[[:digit:]]+||' | sed 's|:|/|g' | sed -r 's|\.git$||')

	echo "${GIT_ORGANIZE_BASE}/${repopath}"
}

organize() {
        local path=$(realpath "$1" 2>/dev/null)

        if [[ -z "${path}" ]]; then
                return 0
        fi

        if ! has_repo "${path}"; then
                #echo "[DD] ${path} is not a git repository." >&2
                return 0
        fi

	local repourl="$(repo_url "$path")"
        if [[ -z "$repourl" ]]; then
                echo "[WW] ${path} does not have an upstream, ignoring" >&2
                return 0
        fi

	local newpath="$(repo_dest_path "$repourl")"

        local dir=$(dirname "$newpath")

        if [[ $(realpath "$path") = $(realpath "$newpath" 2>/dev/null) ]]; then
                echo "[DD] $path is already where it should be"
                return 0
        fi

        if [[ -e "${newpath}" ]]; then
                echo "[EE] can't organize ${path}, ${newpath} already exists"
                return 1
        fi

        #echo "[DD] making directory ${dir}"
        mkdir -p "${dir}"

        echo "[II] moving $path to ${newpath}"
        mv "${path}" "$newpath"
}

organize_dir() {
        local path="$1"

	echo "[II] organizing all repositories at path \"${path}\""

        if has_repo "${path}"; then
                organize "$path" || echo "[EE] error organizing ${path}"
                return 0
        fi

	if [[ ! -d "$path" ]]; then
		return 0
	fi

	echo "[II] recursing into directory ${path}"

        for subpath in "${path}/"*; do
                organize "$subpath" || echo "[EE] error organizing ${subpath}"
        done
}

main() {
	paths=("$@")

	if [[ -z "$paths" ]]; then
		echo "usage: $0 <path> [path...]"
		exit 1
	fi

	for path in "$@"; do
		organize_dir "$path"
	done
}

if [[ $(basename "$0") == "git-organize" ]]; then
	main "$@"
fi
